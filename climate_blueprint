blueprint:
  name: "Basic Temperature-based Climate Control with Sensor Safety"
  description: "Control a climate device based on temperature sensor readings with customizable thresholds, dynamic settings, and safety features"
  domain: automation
  input:
    climate_entity:
      name: Climate Device
      selector:
        entity:
          domain: climate
    temperature_sensor:
      name: Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    base_temperature_input:
      name: Base Temperature Input Number
      description: "The input_number entity for base temperature"
      selector:
        entity:
          domain: input_number
    upper_threshold:
      name: Upper Threshold
      description: "Temperature difference above base to trigger cooling"
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: "°C"
    lower_threshold:
      name: Lower Threshold
      description: "Temperature difference below base to turn off climate"
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: "°C"
    enable_automation_input:
      name: Enable Automation Input Boolean
      description: "The input_boolean entity to enable or disable the automation"
      selector:
        entity:
          domain: input_boolean

trigger:
  - platform: state
    entity_id: 
      - !input temperature_sensor
      - !input base_temperature_input
      - !input enable_automation_input

action:
  - choose:
      # When temperature sensor is unavailable
      - conditions:
          - condition: state
            entity_id: !input temperature_sensor
            state: "unavailable"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: "off"
          - service: notify.persistent_notification
            data:
              message: "Climate control turned off due to unavailable temperature sensor."
              title: "Climate Control Safety Alert"

      # When automation is enabled and sensor is available
      - conditions:
          - condition: state
            entity_id: !input enable_automation_input
            state: "on"
          - condition: not
            conditions:
              - condition: state
                entity_id: !input temperature_sensor
                state: "unavailable"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: >
                {% set current_temp = states(temperature_sensor) | float %}
                {% set base_temp = states(base_temperature_input) | float %}
                {% if current_temp > (base_temp + upper_threshold) %}
                  cool
                {% elif current_temp < (base_temp - lower_threshold) %}
                  off
                {% else %}
                  {{ states(climate_entity).attributes.hvac_mode }}
                {% endif %}
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entity
            data:
              temperature: "{{ states(base_temperature_input) | float }}"

      # When automation is disabled
      - conditions:
          - condition: state
            entity_id: !input enable_automation_input
            state: "off"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: "off"
