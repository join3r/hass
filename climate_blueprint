blueprint:
  name: Maintain room temperature with AC (no helpers, 0.5°C hysteresis)
  description: >
    Keeps room temperature using a temperature sensor and a climate (AC) entity.
    No helpers are needed:
      - Use the automation entity toggle in your dashboard to enable/disable control.
      - Use the AC climate entity's target temperature as the setpoint (adjust it from a climate card).
    Behavior:
      - Turns AC OFF when room temperature ≤ (setpoint - 0.5 °C).
      - Turns AC ON when room temperature ≥ setpoint, and sets AC to the desired HVAC mode.
  domain: automation
  input:
    temp_sensor:
      name: Temperature sensor
      description: Sensor measuring the room temperature (°C)
      selector:
        entity:
          domain: sensor
          device_class: temperature

    climate_entity:
      name: AC (climate)
      description: The climate entity of your AC
      selector:
        entity:
          domain: climate

    on_hvac_mode:
      name: HVAC mode when ON
      description: HVAC mode used when turning the AC ON (typically "cool")
      default: cool
      selector:
        select:
          options:
            - cool
            - auto
            - dry
            - fan_only

    hysteresis:
      name: Hysteresis (°C)
      description: Difference below setpoint at which the AC turns OFF
      default: 0.5
      selector:
        number:
          min: 0.2
          max: 3.0
          step: 0.1
          unit_of_measurement: °C
          mode: slider

mode: restart
max_exceeded: silent

trigger:
  - id: temp_change
    platform: state
    entity_id: !input temp_sensor

  - id: setpoint_change_temperature
    platform: state
    entity_id: !input climate_entity
    attribute: temperature

  - id: setpoint_change_high
    platform: state
    entity_id: !input climate_entity
    attribute: target_temp_high

  - id: ha_start
    platform: homeassistant
    event: start

  - id: periodic
    platform: time_pattern
    minutes: "/5"

variables:
  temp_entity: !input temp_sensor
  climate_entity_var: !input climate_entity
  hvac_mode_on: !input on_hvac_mode
  hys: !input hysteresis

  current_temp: "{{ states(temp_entity) | float(default=None) }}"

  # Pick the climate's effective cooling setpoint:
  # Prefer single setpoint 'temperature', else use 'target_temp_high' (heat_cool),
  # else fall back to 'target_temp_low' if that's all we have.
  setpoint: >-
    {% set t  = state_attr(climate_entity_var, 'temperature') %}
    {% set th = state_attr(climate_entity_var, 'target_temp_high') %}
    {% set tl = state_attr(climate_entity_var, 'target_temp_low') %}
    {{ (t if t is not none else th if th is not none else tl) | float(default=None) }}

  values_ok: "{{ current_temp is not none and setpoint is not none }}"

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            alias: Ensure sensor and setpoint are valid
            value_template: "{{ values_ok }}"
          - condition: template
            alias: Room is at or below setpoint - hysteresis → turn OFF
            value_template: "{{ current_temp <= (setpoint - hys) }}"
        sequence:
          - alias: Turn AC OFF (generic service for best compatibility)
            service: climate.turn_off
            target:
              entity_id: !input climate_entity

      - conditions:
          - condition: template
            alias: Ensure sensor and setpoint are valid
            value_template: "{{ values_ok }}"
          - condition: template
            alias: Room at or above setpoint → turn ON
            value_template: "{{ current_temp >= setpoint }}"
        sequence:
          - alias: Turn AC ON with selected mode
            service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: !input on_hvac_mode
          - alias: Ensure target temperature matches the setpoint
            service: climate.set_temperature
            target:
              entity_id: !input climate_entity
            data:
              temperature: "{{ setpoint }}"
    default: []
